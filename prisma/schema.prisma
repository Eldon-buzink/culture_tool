generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String               @id @default(cuid())
  email           String               @unique
  name            String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  responses       AssessmentResponse[]
  assessments     Assessment[]
  teamMemberships TeamMember[]

  @@map("users")
}

model Team {
  id          String           @id @default(cuid())
  name        String
  code        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assessments Assessment[]
  invitations TeamInvitation[]
  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Assessment {
  id          String               @id @default(cuid())
  title       String
  description String?
  type        String
  status      String               @default("draft")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  teamId      String?
  createdBy   String
  responses   AssessmentResponse[]
  results     AssessmentResult?
  creator     User                 @relation(fields: [createdBy], references: [id])
  team        Team?                @relation(fields: [teamId], references: [id])

  @@map("assessments")
}

model AssessmentResponse {
  id           String     @id @default(cuid())
  assessmentId String
  userId       String
  section      String
  questionId   String
  response     Int
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, userId, section, questionId])
  @@map("assessment_responses")
}

model AssessmentResult {
  id                          String     @id @default(cuid())
  assessmentId                String     @unique
  completedAt                 DateTime   @default(now())
  oceanOpenness               Int
  oceanConscientiousness      Int
  oceanExtraversion           Int
  oceanAgreeableness          Int
  oceanNeuroticism            Int
  culturePowerDistance        Int
  cultureIndividualism        Int
  cultureMasculinity          Int
  cultureUncertaintyAvoidance Int
  cultureLongTermOrientation  Int
  cultureIndulgence           Int
  valuesInnovation            Int
  valuesCollaboration         Int
  valuesAutonomy              Int
  valuesQuality               Int
  valuesCustomerFocus         Int
  insights                    String
  recommendations             String
  assessment                  Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("assessment_results")
}

model TeamInvitation {
  id          String    @id @default(cuid())
  teamId      String
  email       String
  name        String?
  message     String?
  status      String    @default("pending")
  sentAt      DateTime  @default(now())
  respondedAt DateTime?
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_invitations")
}
