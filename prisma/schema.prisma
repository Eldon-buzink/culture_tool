// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Assessment relationships
  assessments Assessment[]
  
  // Team relationships
  teamMemberships TeamMember[]
  createdTeams    Team[] @relation("TeamCreator")

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  code        String   @unique // Unique team code for invitations
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  creatorId String
  creator   User   @relation("TeamCreator", fields: [creatorId], references: [id])
  members   TeamMember[]
  assessments Assessment[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  status    TeamMemberStatus @default(INVITED)
  joinedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Assessment {
  id          String   @id @default(cuid())
  userId      String
  teamId      String?
  status      AssessmentStatus @default(IN_PROGRESS)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  team  Team? @relation(fields: [teamId], references: [id], onDelete: SetNull)
  responses AssessmentResponse[]
  results    AssessmentResult?

  @@map("assessments")
}

model AssessmentResponse {
  id           String @id @default(cuid())
  assessmentId String
  questionId   String
  response     Int    // 1-7 scale
  createdAt    DateTime @default(now())

  // Relationships
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, questionId])
  @@map("assessment_responses")
}

model AssessmentResult {
  id           String @id @default(cuid())
  assessmentId String @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // OCEAN Scores (0-100)
  openness         Int
  conscientiousness Int
  extraversion     Int
  agreeableness    Int
  neuroticism      Int

  // Culture Scores (0-100)
  powerDistance        Int
  individualism        Int
  masculinity          Int
  uncertaintyAvoidance Int
  longTermOrientation  Int
  indulgence           Int

  // Values Scores (0-100)
  innovation      Int
  collaboration   Int
  autonomy        Int
  quality         Int
  customerFocus   Int

  // Relationships
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("assessment_results")
}

enum TeamMemberStatus {
  INVITED
  IN_PROGRESS
  COMPLETED
}

enum AssessmentStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}
